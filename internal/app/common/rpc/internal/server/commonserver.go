// Code generated by goctl. DO NOT EDIT!
// Source: common.proto

package server

import (
	"context"
	commonpb2 "fgzs/internal/app/common/rpc/commonpb"
	logic2 "fgzs/internal/app/common/rpc/internal/logic"
	"fgzs/internal/app/common/rpc/internal/svc"
)

type CommonServer struct {
	svcCtx *svc.ServiceContext
	commonpb2.UnimplementedCommonServer
}

func NewCommonServer(svcCtx *svc.ServiceContext) *CommonServer {
	return &CommonServer{
		svcCtx: svcCtx,
	}
}

// 验证码
func (s *CommonServer) CaptchaGenerate(ctx context.Context, in *commonpb2.CaptchaGenerateReq) (*commonpb2.CaptchaGenerateResp, error) {
	l := logic2.NewCaptchaGenerateLogic(ctx, s.svcCtx)
	return l.CaptchaGenerate(in)
}

// 验证码校验
func (s *CommonServer) CaptchaCheck(ctx context.Context, in *commonpb2.CaptchaCheckReq) (*commonpb2.CaptchaCheckResp, error) {
	l := logic2.NewCaptchaCheckLogic(ctx, s.svcCtx)
	return l.CaptchaCheck(in)
}

// 短信发送
func (s *CommonServer) SmsSend(ctx context.Context, in *commonpb2.SmsSendReq) (*commonpb2.SmsSendResp, error) {
	l := logic2.NewSmsSendLogic(ctx, s.svcCtx)
	return l.SmsSend(in)
}

// 短信发送校验
func (s *CommonServer) SmsCheck(ctx context.Context, in *commonpb2.SmsCheckReq) (*commonpb2.SmsCheckResp, error) {
	l := logic2.NewSmsCheckLogic(ctx, s.svcCtx)
	return l.SmsCheck(in)
}

// 短信记录
func (s *CommonServer) SmsRecord(ctx context.Context, in *commonpb2.SmsRecordReq) (*commonpb2.SmsRecordResp, error) {
	l := logic2.NewSmsRecordLogic(ctx, s.svcCtx)
	return l.SmsRecord(in)
}

// 敏感词检测
func (s *CommonServer) SensitiveWordCheck(ctx context.Context, in *commonpb2.SensitiveWordCheckReq) (*commonpb2.SensitiveWordCheckResp, error) {
	l := logic2.NewSensitiveWordCheckLogic(ctx, s.svcCtx)
	return l.SensitiveWordCheck(in)
}

// 敏感词查询
func (s *CommonServer) SensitiveWordSearch(ctx context.Context, in *commonpb2.SensitiveWordSearchReq) (*commonpb2.SensitiveWordSearchResp, error) {
	l := logic2.NewSensitiveWordSearchLogic(ctx, s.svcCtx)
	return l.SensitiveWordSearch(in)
}

// 敏感词添加
func (s *CommonServer) SensitiveWordAdd(ctx context.Context, in *commonpb2.SensitiveWordAddReq) (*commonpb2.SensitiveWordAddResp, error) {
	l := logic2.NewSensitiveWordAddLogic(ctx, s.svcCtx)
	return l.SensitiveWordAdd(in)
}

// 敏感词删除
func (s *CommonServer) SensitiveWordDel(ctx context.Context, in *commonpb2.SensitiveWordDelReq) (*commonpb2.SensitiveWordDelResp, error) {
	l := logic2.NewSensitiveWordDelLogic(ctx, s.svcCtx)
	return l.SensitiveWordDel(in)
}

// 敏感词缓存
func (s *CommonServer) SensitiveWordCache(ctx context.Context, in *commonpb2.SensitiveWordCacheReq) (*commonpb2.SensitiveWordCacheResp, error) {
	l := logic2.NewSensitiveWordCacheLogic(ctx, s.svcCtx)
	return l.SensitiveWordCache(in)
}
