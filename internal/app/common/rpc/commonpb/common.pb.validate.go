// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common.proto

package commonpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CaptchaGenerateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CaptchaGenerateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaGenerateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaGenerateReqMultiError, or nil if none found.
func (m *CaptchaGenerateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaGenerateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CaptchaGenerateReqMultiError(errors)
	}

	return nil
}

// CaptchaGenerateReqMultiError is an error wrapping multiple validation errors
// returned by CaptchaGenerateReq.ValidateAll() if the designated constraints
// aren't met.
type CaptchaGenerateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaGenerateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaGenerateReqMultiError) AllErrors() []error { return m }

// CaptchaGenerateReqValidationError is the validation error returned by
// CaptchaGenerateReq.Validate if the designated constraints aren't met.
type CaptchaGenerateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaGenerateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaGenerateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaGenerateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaGenerateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaGenerateReqValidationError) ErrorName() string {
	return "CaptchaGenerateReqValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaGenerateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaGenerateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaGenerateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaGenerateReqValidationError{}

// Validate checks the field values on CaptchaGenerateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CaptchaGenerateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaGenerateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaGenerateRespMultiError, or nil if none found.
func (m *CaptchaGenerateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaGenerateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaId

	// no validation rules for PicPath

	if len(errors) > 0 {
		return CaptchaGenerateRespMultiError(errors)
	}

	return nil
}

// CaptchaGenerateRespMultiError is an error wrapping multiple validation
// errors returned by CaptchaGenerateResp.ValidateAll() if the designated
// constraints aren't met.
type CaptchaGenerateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaGenerateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaGenerateRespMultiError) AllErrors() []error { return m }

// CaptchaGenerateRespValidationError is the validation error returned by
// CaptchaGenerateResp.Validate if the designated constraints aren't met.
type CaptchaGenerateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaGenerateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaGenerateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaGenerateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaGenerateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaGenerateRespValidationError) ErrorName() string {
	return "CaptchaGenerateRespValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaGenerateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaGenerateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaGenerateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaGenerateRespValidationError{}

// Validate checks the field values on CaptchaCheckReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CaptchaCheckReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaCheckReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaCheckReqMultiError, or nil if none found.
func (m *CaptchaCheckReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaCheckReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaId

	// no validation rules for Captcha

	if len(errors) > 0 {
		return CaptchaCheckReqMultiError(errors)
	}

	return nil
}

// CaptchaCheckReqMultiError is an error wrapping multiple validation errors
// returned by CaptchaCheckReq.ValidateAll() if the designated constraints
// aren't met.
type CaptchaCheckReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaCheckReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaCheckReqMultiError) AllErrors() []error { return m }

// CaptchaCheckReqValidationError is the validation error returned by
// CaptchaCheckReq.Validate if the designated constraints aren't met.
type CaptchaCheckReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaCheckReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaCheckReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaCheckReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaCheckReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaCheckReqValidationError) ErrorName() string { return "CaptchaCheckReqValidationError" }

// Error satisfies the builtin error interface
func (e CaptchaCheckReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaCheckReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaCheckReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaCheckReqValidationError{}

// Validate checks the field values on CaptchaCheckResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CaptchaCheckResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaCheckResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaCheckRespMultiError, or nil if none found.
func (m *CaptchaCheckResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaCheckResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CaptchaCheckRespMultiError(errors)
	}

	return nil
}

// CaptchaCheckRespMultiError is an error wrapping multiple validation errors
// returned by CaptchaCheckResp.ValidateAll() if the designated constraints
// aren't met.
type CaptchaCheckRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaCheckRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaCheckRespMultiError) AllErrors() []error { return m }

// CaptchaCheckRespValidationError is the validation error returned by
// CaptchaCheckResp.Validate if the designated constraints aren't met.
type CaptchaCheckRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaCheckRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaCheckRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaCheckRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaCheckRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaCheckRespValidationError) ErrorName() string { return "CaptchaCheckRespValidationError" }

// Error satisfies the builtin error interface
func (e CaptchaCheckRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaCheckResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaCheckRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaCheckRespValidationError{}

// Validate checks the field values on SmsSendReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SmsSendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SmsSendReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SmsSendReqMultiError, or
// nil if none found.
func (m *SmsSendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SmsSendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Phone

	if len(errors) > 0 {
		return SmsSendReqMultiError(errors)
	}

	return nil
}

// SmsSendReqMultiError is an error wrapping multiple validation errors
// returned by SmsSendReq.ValidateAll() if the designated constraints aren't met.
type SmsSendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SmsSendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SmsSendReqMultiError) AllErrors() []error { return m }

// SmsSendReqValidationError is the validation error returned by
// SmsSendReq.Validate if the designated constraints aren't met.
type SmsSendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SmsSendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SmsSendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SmsSendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SmsSendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SmsSendReqValidationError) ErrorName() string { return "SmsSendReqValidationError" }

// Error satisfies the builtin error interface
func (e SmsSendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSmsSendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SmsSendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SmsSendReqValidationError{}

// Validate checks the field values on SmsSendResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SmsSendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SmsSendResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SmsSendRespMultiError, or
// nil if none found.
func (m *SmsSendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SmsSendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return SmsSendRespMultiError(errors)
	}

	return nil
}

// SmsSendRespMultiError is an error wrapping multiple validation errors
// returned by SmsSendResp.ValidateAll() if the designated constraints aren't met.
type SmsSendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SmsSendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SmsSendRespMultiError) AllErrors() []error { return m }

// SmsSendRespValidationError is the validation error returned by
// SmsSendResp.Validate if the designated constraints aren't met.
type SmsSendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SmsSendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SmsSendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SmsSendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SmsSendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SmsSendRespValidationError) ErrorName() string { return "SmsSendRespValidationError" }

// Error satisfies the builtin error interface
func (e SmsSendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSmsSendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SmsSendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SmsSendRespValidationError{}

// Validate checks the field values on SmsCheckReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SmsCheckReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SmsCheckReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SmsCheckReqMultiError, or
// nil if none found.
func (m *SmsCheckReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SmsCheckReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Phone

	// no validation rules for Code

	if len(errors) > 0 {
		return SmsCheckReqMultiError(errors)
	}

	return nil
}

// SmsCheckReqMultiError is an error wrapping multiple validation errors
// returned by SmsCheckReq.ValidateAll() if the designated constraints aren't met.
type SmsCheckReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SmsCheckReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SmsCheckReqMultiError) AllErrors() []error { return m }

// SmsCheckReqValidationError is the validation error returned by
// SmsCheckReq.Validate if the designated constraints aren't met.
type SmsCheckReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SmsCheckReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SmsCheckReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SmsCheckReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SmsCheckReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SmsCheckReqValidationError) ErrorName() string { return "SmsCheckReqValidationError" }

// Error satisfies the builtin error interface
func (e SmsCheckReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSmsCheckReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SmsCheckReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SmsCheckReqValidationError{}

// Validate checks the field values on SmsCheckResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SmsCheckResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SmsCheckResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SmsCheckRespMultiError, or
// nil if none found.
func (m *SmsCheckResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SmsCheckResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SmsCheckRespMultiError(errors)
	}

	return nil
}

// SmsCheckRespMultiError is an error wrapping multiple validation errors
// returned by SmsCheckResp.ValidateAll() if the designated constraints aren't met.
type SmsCheckRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SmsCheckRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SmsCheckRespMultiError) AllErrors() []error { return m }

// SmsCheckRespValidationError is the validation error returned by
// SmsCheckResp.Validate if the designated constraints aren't met.
type SmsCheckRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SmsCheckRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SmsCheckRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SmsCheckRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SmsCheckRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SmsCheckRespValidationError) ErrorName() string { return "SmsCheckRespValidationError" }

// Error satisfies the builtin error interface
func (e SmsCheckRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSmsCheckResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SmsCheckRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SmsCheckRespValidationError{}

// Validate checks the field values on SmsRecordReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SmsRecordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SmsRecordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SmsRecordReqMultiError, or
// nil if none found.
func (m *SmsRecordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SmsRecordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Platform

	// no validation rules for MemberID

	// no validation rules for Phone

	// no validation rules for SmsType

	// no validation rules for TmpID

	// no validation rules for TmpContent

	if len(errors) > 0 {
		return SmsRecordReqMultiError(errors)
	}

	return nil
}

// SmsRecordReqMultiError is an error wrapping multiple validation errors
// returned by SmsRecordReq.ValidateAll() if the designated constraints aren't met.
type SmsRecordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SmsRecordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SmsRecordReqMultiError) AllErrors() []error { return m }

// SmsRecordReqValidationError is the validation error returned by
// SmsRecordReq.Validate if the designated constraints aren't met.
type SmsRecordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SmsRecordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SmsRecordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SmsRecordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SmsRecordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SmsRecordReqValidationError) ErrorName() string { return "SmsRecordReqValidationError" }

// Error satisfies the builtin error interface
func (e SmsRecordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSmsRecordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SmsRecordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SmsRecordReqValidationError{}

// Validate checks the field values on SmsRecordResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SmsRecordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SmsRecordResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SmsRecordRespMultiError, or
// nil if none found.
func (m *SmsRecordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SmsRecordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SmsRecordRespMultiError(errors)
	}

	return nil
}

// SmsRecordRespMultiError is an error wrapping multiple validation errors
// returned by SmsRecordResp.ValidateAll() if the designated constraints
// aren't met.
type SmsRecordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SmsRecordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SmsRecordRespMultiError) AllErrors() []error { return m }

// SmsRecordRespValidationError is the validation error returned by
// SmsRecordResp.Validate if the designated constraints aren't met.
type SmsRecordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SmsRecordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SmsRecordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SmsRecordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SmsRecordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SmsRecordRespValidationError) ErrorName() string { return "SmsRecordRespValidationError" }

// Error satisfies the builtin error interface
func (e SmsRecordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSmsRecordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SmsRecordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SmsRecordRespValidationError{}

// Validate checks the field values on SensitiveWordCheckReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordCheckReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordCheckReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordCheckReqMultiError, or nil if none found.
func (m *SensitiveWordCheckReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordCheckReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Word

	if len(errors) > 0 {
		return SensitiveWordCheckReqMultiError(errors)
	}

	return nil
}

// SensitiveWordCheckReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordCheckReq.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordCheckReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordCheckReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordCheckReqMultiError) AllErrors() []error { return m }

// SensitiveWordCheckReqValidationError is the validation error returned by
// SensitiveWordCheckReq.Validate if the designated constraints aren't met.
type SensitiveWordCheckReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordCheckReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordCheckReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordCheckReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordCheckReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordCheckReqValidationError) ErrorName() string {
	return "SensitiveWordCheckReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordCheckReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordCheckReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordCheckReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordCheckReqValidationError{}

// Validate checks the field values on SensitiveWordCheckResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordCheckResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordCheckResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordCheckRespMultiError, or nil if none found.
func (m *SensitiveWordCheckResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordCheckResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Replace

	// no validation rules for Filter

	if len(errors) > 0 {
		return SensitiveWordCheckRespMultiError(errors)
	}

	return nil
}

// SensitiveWordCheckRespMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordCheckResp.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordCheckRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordCheckRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordCheckRespMultiError) AllErrors() []error { return m }

// SensitiveWordCheckRespValidationError is the validation error returned by
// SensitiveWordCheckResp.Validate if the designated constraints aren't met.
type SensitiveWordCheckRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordCheckRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordCheckRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordCheckRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordCheckRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordCheckRespValidationError) ErrorName() string {
	return "SensitiveWordCheckRespValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordCheckRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordCheckResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordCheckRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordCheckRespValidationError{}

// Validate checks the field values on SensitiveWordSearchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordSearchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordSearchReqMultiError, or nil if none found.
func (m *SensitiveWordSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	if len(errors) > 0 {
		return SensitiveWordSearchReqMultiError(errors)
	}

	return nil
}

// SensitiveWordSearchReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordSearchReq.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordSearchReqMultiError) AllErrors() []error { return m }

// SensitiveWordSearchReqValidationError is the validation error returned by
// SensitiveWordSearchReq.Validate if the designated constraints aren't met.
type SensitiveWordSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordSearchReqValidationError) ErrorName() string {
	return "SensitiveWordSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordSearchReqValidationError{}

// Validate checks the field values on SensitiveWordSearchResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordSearchResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordSearchResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordSearchRespMultiError, or nil if none found.
func (m *SensitiveWordSearchResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordSearchResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveWordSearchRespMultiError(errors)
	}

	return nil
}

// SensitiveWordSearchRespMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordSearchResp.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordSearchRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordSearchRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordSearchRespMultiError) AllErrors() []error { return m }

// SensitiveWordSearchRespValidationError is the validation error returned by
// SensitiveWordSearchResp.Validate if the designated constraints aren't met.
type SensitiveWordSearchRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordSearchRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordSearchRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordSearchRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordSearchRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordSearchRespValidationError) ErrorName() string {
	return "SensitiveWordSearchRespValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordSearchRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordSearchResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordSearchRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordSearchRespValidationError{}

// Validate checks the field values on SensitiveWordAddReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordAddReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordAddReqMultiError, or nil if none found.
func (m *SensitiveWordAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Word

	if len(errors) > 0 {
		return SensitiveWordAddReqMultiError(errors)
	}

	return nil
}

// SensitiveWordAddReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordAddReq.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordAddReqMultiError) AllErrors() []error { return m }

// SensitiveWordAddReqValidationError is the validation error returned by
// SensitiveWordAddReq.Validate if the designated constraints aren't met.
type SensitiveWordAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordAddReqValidationError) ErrorName() string {
	return "SensitiveWordAddReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordAddReqValidationError{}

// Validate checks the field values on SensitiveWordAddResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordAddResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordAddRespMultiError, or nil if none found.
func (m *SensitiveWordAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveWordAddRespMultiError(errors)
	}

	return nil
}

// SensitiveWordAddRespMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordAddResp.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordAddRespMultiError) AllErrors() []error { return m }

// SensitiveWordAddRespValidationError is the validation error returned by
// SensitiveWordAddResp.Validate if the designated constraints aren't met.
type SensitiveWordAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordAddRespValidationError) ErrorName() string {
	return "SensitiveWordAddRespValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordAddRespValidationError{}

// Validate checks the field values on SensitiveWordDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordDelReqMultiError, or nil if none found.
func (m *SensitiveWordDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Word

	if len(errors) > 0 {
		return SensitiveWordDelReqMultiError(errors)
	}

	return nil
}

// SensitiveWordDelReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordDelReq.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordDelReqMultiError) AllErrors() []error { return m }

// SensitiveWordDelReqValidationError is the validation error returned by
// SensitiveWordDelReq.Validate if the designated constraints aren't met.
type SensitiveWordDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordDelReqValidationError) ErrorName() string {
	return "SensitiveWordDelReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordDelReqValidationError{}

// Validate checks the field values on SensitiveWordDelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordDelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordDelRespMultiError, or nil if none found.
func (m *SensitiveWordDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveWordDelRespMultiError(errors)
	}

	return nil
}

// SensitiveWordDelRespMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordDelResp.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordDelRespMultiError) AllErrors() []error { return m }

// SensitiveWordDelRespValidationError is the validation error returned by
// SensitiveWordDelResp.Validate if the designated constraints aren't met.
type SensitiveWordDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordDelRespValidationError) ErrorName() string {
	return "SensitiveWordDelRespValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordDelRespValidationError{}

// Validate checks the field values on SensitiveWordCacheReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordCacheReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordCacheReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordCacheReqMultiError, or nil if none found.
func (m *SensitiveWordCacheReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordCacheReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveWordCacheReqMultiError(errors)
	}

	return nil
}

// SensitiveWordCacheReqMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordCacheReq.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordCacheReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordCacheReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordCacheReqMultiError) AllErrors() []error { return m }

// SensitiveWordCacheReqValidationError is the validation error returned by
// SensitiveWordCacheReq.Validate if the designated constraints aren't met.
type SensitiveWordCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordCacheReqValidationError) ErrorName() string {
	return "SensitiveWordCacheReqValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordCacheReqValidationError{}

// Validate checks the field values on SensitiveWordCacheResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SensitiveWordCacheResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SensitiveWordCacheResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SensitiveWordCacheRespMultiError, or nil if none found.
func (m *SensitiveWordCacheResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SensitiveWordCacheResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SensitiveWordCacheRespMultiError(errors)
	}

	return nil
}

// SensitiveWordCacheRespMultiError is an error wrapping multiple validation
// errors returned by SensitiveWordCacheResp.ValidateAll() if the designated
// constraints aren't met.
type SensitiveWordCacheRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensitiveWordCacheRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensitiveWordCacheRespMultiError) AllErrors() []error { return m }

// SensitiveWordCacheRespValidationError is the validation error returned by
// SensitiveWordCacheResp.Validate if the designated constraints aren't met.
type SensitiveWordCacheRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensitiveWordCacheRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensitiveWordCacheRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensitiveWordCacheRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensitiveWordCacheRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensitiveWordCacheRespValidationError) ErrorName() string {
	return "SensitiveWordCacheRespValidationError"
}

// Error satisfies the builtin error interface
func (e SensitiveWordCacheRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensitiveWordCacheResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensitiveWordCacheRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensitiveWordCacheRespValidationError{}
