// Code generated by goctl. DO NOT EDIT!
// Source: common.proto

package common

import (
	"context"
	commonpb2 "fgzs/internal/app/common/rpc/commonpb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CaptchaCheckReq         = commonpb2.CaptchaCheckReq
	CaptchaCheckResp        = commonpb2.CaptchaCheckResp
	CaptchaGenerateReq      = commonpb2.CaptchaGenerateReq
	CaptchaGenerateResp     = commonpb2.CaptchaGenerateResp
	SensitiveWordAddReq     = commonpb2.SensitiveWordAddReq
	SensitiveWordAddResp    = commonpb2.SensitiveWordAddResp
	SensitiveWordCacheReq   = commonpb2.SensitiveWordCacheReq
	SensitiveWordCacheResp  = commonpb2.SensitiveWordCacheResp
	SensitiveWordCheckReq   = commonpb2.SensitiveWordCheckReq
	SensitiveWordCheckResp  = commonpb2.SensitiveWordCheckResp
	SensitiveWordDelReq     = commonpb2.SensitiveWordDelReq
	SensitiveWordDelResp    = commonpb2.SensitiveWordDelResp
	SensitiveWordSearchReq  = commonpb2.SensitiveWordSearchReq
	SensitiveWordSearchResp = commonpb2.SensitiveWordSearchResp
	SmsCheckReq             = commonpb2.SmsCheckReq
	SmsCheckResp            = commonpb2.SmsCheckResp
	SmsRecordReq            = commonpb2.SmsRecordReq
	SmsRecordResp           = commonpb2.SmsRecordResp
	SmsSendReq              = commonpb2.SmsSendReq
	SmsSendResp             = commonpb2.SmsSendResp

	Common interface {
		// 验证码
		CaptchaGenerate(ctx context.Context, in *CaptchaGenerateReq, opts ...grpc.CallOption) (*CaptchaGenerateResp, error)
		// 验证码校验
		CaptchaCheck(ctx context.Context, in *CaptchaCheckReq, opts ...grpc.CallOption) (*CaptchaCheckResp, error)
		// 短信发送
		SmsSend(ctx context.Context, in *SmsSendReq, opts ...grpc.CallOption) (*SmsSendResp, error)
		// 短信发送校验
		SmsCheck(ctx context.Context, in *SmsCheckReq, opts ...grpc.CallOption) (*SmsCheckResp, error)
		// 短信记录
		SmsRecord(ctx context.Context, in *SmsRecordReq, opts ...grpc.CallOption) (*SmsRecordResp, error)
		// 敏感词检测
		SensitiveWordCheck(ctx context.Context, in *SensitiveWordCheckReq, opts ...grpc.CallOption) (*SensitiveWordCheckResp, error)
		// 敏感词查询
		SensitiveWordSearch(ctx context.Context, in *SensitiveWordSearchReq, opts ...grpc.CallOption) (*SensitiveWordSearchResp, error)
		// 敏感词添加
		SensitiveWordAdd(ctx context.Context, in *SensitiveWordAddReq, opts ...grpc.CallOption) (*SensitiveWordAddResp, error)
		// 敏感词删除
		SensitiveWordDel(ctx context.Context, in *SensitiveWordDelReq, opts ...grpc.CallOption) (*SensitiveWordDelResp, error)
		// 敏感词缓存
		SensitiveWordCache(ctx context.Context, in *SensitiveWordCacheReq, opts ...grpc.CallOption) (*SensitiveWordCacheResp, error)
	}

	defaultCommon struct {
		cli zrpc.Client
	}
)

func NewCommon(cli zrpc.Client) Common {
	return &defaultCommon{
		cli: cli,
	}
}

// 验证码
func (m *defaultCommon) CaptchaGenerate(ctx context.Context, in *CaptchaGenerateReq, opts ...grpc.CallOption) (*CaptchaGenerateResp, error) {
	client := commonpb2.NewCommonClient(m.cli.Conn())
	return client.CaptchaGenerate(ctx, in, opts...)
}

// 验证码校验
func (m *defaultCommon) CaptchaCheck(ctx context.Context, in *CaptchaCheckReq, opts ...grpc.CallOption) (*CaptchaCheckResp, error) {
	client := commonpb2.NewCommonClient(m.cli.Conn())
	return client.CaptchaCheck(ctx, in, opts...)
}

// 短信发送
func (m *defaultCommon) SmsSend(ctx context.Context, in *SmsSendReq, opts ...grpc.CallOption) (*SmsSendResp, error) {
	client := commonpb2.NewCommonClient(m.cli.Conn())
	return client.SmsSend(ctx, in, opts...)
}

// 短信发送校验
func (m *defaultCommon) SmsCheck(ctx context.Context, in *SmsCheckReq, opts ...grpc.CallOption) (*SmsCheckResp, error) {
	client := commonpb2.NewCommonClient(m.cli.Conn())
	return client.SmsCheck(ctx, in, opts...)
}

// 短信记录
func (m *defaultCommon) SmsRecord(ctx context.Context, in *SmsRecordReq, opts ...grpc.CallOption) (*SmsRecordResp, error) {
	client := commonpb2.NewCommonClient(m.cli.Conn())
	return client.SmsRecord(ctx, in, opts...)
}

// 敏感词检测
func (m *defaultCommon) SensitiveWordCheck(ctx context.Context, in *SensitiveWordCheckReq, opts ...grpc.CallOption) (*SensitiveWordCheckResp, error) {
	client := commonpb2.NewCommonClient(m.cli.Conn())
	return client.SensitiveWordCheck(ctx, in, opts...)
}

// 敏感词查询
func (m *defaultCommon) SensitiveWordSearch(ctx context.Context, in *SensitiveWordSearchReq, opts ...grpc.CallOption) (*SensitiveWordSearchResp, error) {
	client := commonpb2.NewCommonClient(m.cli.Conn())
	return client.SensitiveWordSearch(ctx, in, opts...)
}

// 敏感词添加
func (m *defaultCommon) SensitiveWordAdd(ctx context.Context, in *SensitiveWordAddReq, opts ...grpc.CallOption) (*SensitiveWordAddResp, error) {
	client := commonpb2.NewCommonClient(m.cli.Conn())
	return client.SensitiveWordAdd(ctx, in, opts...)
}

// 敏感词删除
func (m *defaultCommon) SensitiveWordDel(ctx context.Context, in *SensitiveWordDelReq, opts ...grpc.CallOption) (*SensitiveWordDelResp, error) {
	client := commonpb2.NewCommonClient(m.cli.Conn())
	return client.SensitiveWordDel(ctx, in, opts...)
}

// 敏感词缓存
func (m *defaultCommon) SensitiveWordCache(ctx context.Context, in *SensitiveWordCacheReq, opts ...grpc.CallOption) (*SensitiveWordCacheResp, error) {
	client := commonpb2.NewCommonClient(m.cli.Conn())
	return client.SensitiveWordCache(ctx, in, opts...)
}
