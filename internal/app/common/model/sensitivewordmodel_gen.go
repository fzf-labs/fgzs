// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sensitiveWordFieldNames          = builder.RawFieldNames(&SensitiveWord{})
	sensitiveWordRows                = strings.Join(sensitiveWordFieldNames, ",")
	sensitiveWordRowsExpectAutoSet   = strings.Join(stringx.Remove(sensitiveWordFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sensitiveWordRowsWithPlaceHolder = strings.Join(stringx.Remove(sensitiveWordFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheFgzsCommonSensitiveWordIdPrefix = "cache:fgzsCommon:sensitiveWord:id:"
)

type (
	sensitiveWordModel interface {
		Insert(ctx context.Context, data *SensitiveWord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SensitiveWord, error)
		Update(ctx context.Context, data *SensitiveWord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSensitiveWordModel struct {
		sqlc.CachedConn
		table string
	}

	SensitiveWord struct {
		Id         int64     `db:"id"`
		Word       string    `db:"word"`        // 敏感词
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newSensitiveWordModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSensitiveWordModel {
	return &defaultSensitiveWordModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sensitive_word`",
	}
}

func (m *defaultSensitiveWordModel) Delete(ctx context.Context, id int64) error {
	fgzsCommonSensitiveWordIdKey := fmt.Sprintf("%s%v", cacheFgzsCommonSensitiveWordIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, fgzsCommonSensitiveWordIdKey)
	return err
}

func (m *defaultSensitiveWordModel) FindOne(ctx context.Context, id int64) (*SensitiveWord, error) {
	fgzsCommonSensitiveWordIdKey := fmt.Sprintf("%s%v", cacheFgzsCommonSensitiveWordIdPrefix, id)
	var resp SensitiveWord
	err := m.QueryRowCtx(ctx, &resp, fgzsCommonSensitiveWordIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sensitiveWordRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSensitiveWordModel) Insert(ctx context.Context, data *SensitiveWord) (sql.Result, error) {
	fgzsCommonSensitiveWordIdKey := fmt.Sprintf("%s%v", cacheFgzsCommonSensitiveWordIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, sensitiveWordRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Word)
	}, fgzsCommonSensitiveWordIdKey)
	return ret, err
}

func (m *defaultSensitiveWordModel) Update(ctx context.Context, data *SensitiveWord) error {
	fgzsCommonSensitiveWordIdKey := fmt.Sprintf("%s%v", cacheFgzsCommonSensitiveWordIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sensitiveWordRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Word, data.Id)
	}, fgzsCommonSensitiveWordIdKey)
	return err
}

func (m *defaultSensitiveWordModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFgzsCommonSensitiveWordIdPrefix, primary)
}

func (m *defaultSensitiveWordModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sensitiveWordRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSensitiveWordModel) tableName() string {
	return m.table
}
