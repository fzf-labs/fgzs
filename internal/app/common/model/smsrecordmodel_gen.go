// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	smsRecordFieldNames          = builder.RawFieldNames(&SmsRecord{})
	smsRecordRows                = strings.Join(smsRecordFieldNames, ",")
	smsRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(smsRecordFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	smsRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(smsRecordFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheFgzsCommonSmsRecordIdPrefix = "cache:fgzsCommon:smsRecord:id:"
)

type (
	smsRecordModel interface {
		Insert(ctx context.Context, data *SmsRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SmsRecord, error)
		Update(ctx context.Context, data *SmsRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSmsRecordModel struct {
		sqlc.CachedConn
		table string
	}

	SmsRecord struct {
		Id         int64     `db:"id"`
		Platform   string    `db:"platform"`    // 短信平台
		Phone      string    `db:"phone"`       // 手机号
		SmsType    string    `db:"sms_type"`    // 短信类型
		TmpId      string    `db:"tmp_id"`      // 模板ID
		TmpContent string    `db:"tmp_content"` // 模板信息
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newSmsRecordModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSmsRecordModel {
	return &defaultSmsRecordModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sms_record`",
	}
}

func (m *defaultSmsRecordModel) Delete(ctx context.Context, id int64) error {
	fgzsCommonSmsRecordIdKey := fmt.Sprintf("%s%v", cacheFgzsCommonSmsRecordIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, fgzsCommonSmsRecordIdKey)
	return err
}

func (m *defaultSmsRecordModel) FindOne(ctx context.Context, id int64) (*SmsRecord, error) {
	fgzsCommonSmsRecordIdKey := fmt.Sprintf("%s%v", cacheFgzsCommonSmsRecordIdPrefix, id)
	var resp SmsRecord
	err := m.QueryRowCtx(ctx, &resp, fgzsCommonSmsRecordIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", smsRecordRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSmsRecordModel) Insert(ctx context.Context, data *SmsRecord) (sql.Result, error) {
	fgzsCommonSmsRecordIdKey := fmt.Sprintf("%s%v", cacheFgzsCommonSmsRecordIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, smsRecordRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Platform, data.Phone, data.SmsType, data.TmpId, data.TmpContent)
	}, fgzsCommonSmsRecordIdKey)
	return ret, err
}

func (m *defaultSmsRecordModel) Update(ctx context.Context, data *SmsRecord) error {
	fgzsCommonSmsRecordIdKey := fmt.Sprintf("%s%v", cacheFgzsCommonSmsRecordIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, smsRecordRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Platform, data.Phone, data.SmsType, data.TmpId, data.TmpContent, data.Id)
	}, fgzsCommonSmsRecordIdKey)
	return err
}

func (m *defaultSmsRecordModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFgzsCommonSmsRecordIdPrefix, primary)
}

func (m *defaultSmsRecordModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", smsRecordRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSmsRecordModel) tableName() string {
	return m.table
}
