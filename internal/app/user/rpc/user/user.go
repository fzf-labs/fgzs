// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package user

import (
	"context"
	userpb2 "fgzs/internal/app/user/rpc/userpb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Token                  = userpb2.Token
	UserAppleLoginReq      = userpb2.UserAppleLoginReq
	UserAppleLoginResp     = userpb2.UserAppleLoginResp
	UserLoginOutReq        = userpb2.UserLoginOutReq
	UserLoginOutResp       = userpb2.UserLoginOutResp
	UserOneClickLoginReq   = userpb2.UserOneClickLoginReq
	UserOneClickLoginResp  = userpb2.UserOneClickLoginResp
	UserQQAppLoginReq      = userpb2.UserQQAppLoginReq
	UserQQAppLoginResp     = userpb2.UserQQAppLoginResp
	UserRegisterReq        = userpb2.UserRegisterReq
	UserRegisterResp       = userpb2.UserRegisterResp
	UserSmsLoginReq        = userpb2.UserSmsLoginReq
	UserSmsLoginResp       = userpb2.UserSmsLoginResp
	UserSmsSendReq         = userpb2.UserSmsSendReq
	UserSmsSendResp        = userpb2.UserSmsSendResp
	UserUsernameLoginReq   = userpb2.UserUsernameLoginReq
	UserUsernameLoginResp  = userpb2.UserUsernameLoginResp
	UserWechatAppLoginReq  = userpb2.UserWechatAppLoginReq
	UserWechatAppLoginResp = userpb2.UserWechatAppLoginResp

	User interface {
		// 用户注册
		UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
		// 用户登录-用户名密码
		UserUsernameLogin(ctx context.Context, in *UserUsernameLoginReq, opts ...grpc.CallOption) (*UserUsernameLoginResp, error)
		// 用户登录-短信发送
		UserSmsSend(ctx context.Context, in *UserSmsSendReq, opts ...grpc.CallOption) (*UserSmsSendResp, error)
		// 用户登录-短信登录
		UserSmsLogin(ctx context.Context, in *UserSmsLoginReq, opts ...grpc.CallOption) (*UserSmsLoginResp, error)
		// 用户登录-微信登录
		UserWechatAppLogin(ctx context.Context, in *UserWechatAppLoginReq, opts ...grpc.CallOption) (*UserWechatAppLoginResp, error)
		// 用户登录-qq登录
		UserQQAppLogin(ctx context.Context, in *UserQQAppLoginReq, opts ...grpc.CallOption) (*UserQQAppLoginResp, error)
		// 用户登录-苹果登录
		UserAppleLogin(ctx context.Context, in *UserAppleLoginReq, opts ...grpc.CallOption) (*UserAppleLoginResp, error)
		// 用户登出
		UserLoginOut(ctx context.Context, in *UserLoginOutReq, opts ...grpc.CallOption) (*UserLoginOutResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 用户注册
func (m *defaultUser) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	client := userpb2.NewUserClient(m.cli.Conn())
	return client.UserRegister(ctx, in, opts...)
}

// 用户登录-用户名密码
func (m *defaultUser) UserUsernameLogin(ctx context.Context, in *UserUsernameLoginReq, opts ...grpc.CallOption) (*UserUsernameLoginResp, error) {
	client := userpb2.NewUserClient(m.cli.Conn())
	return client.UserUsernameLogin(ctx, in, opts...)
}

// 用户登录-短信发送
func (m *defaultUser) UserSmsSend(ctx context.Context, in *UserSmsSendReq, opts ...grpc.CallOption) (*UserSmsSendResp, error) {
	client := userpb2.NewUserClient(m.cli.Conn())
	return client.UserSmsSend(ctx, in, opts...)
}

// 用户登录-短信登录
func (m *defaultUser) UserSmsLogin(ctx context.Context, in *UserSmsLoginReq, opts ...grpc.CallOption) (*UserSmsLoginResp, error) {
	client := userpb2.NewUserClient(m.cli.Conn())
	return client.UserSmsLogin(ctx, in, opts...)
}

// 用户登录-微信登录
func (m *defaultUser) UserWechatAppLogin(ctx context.Context, in *UserWechatAppLoginReq, opts ...grpc.CallOption) (*UserWechatAppLoginResp, error) {
	client := userpb2.NewUserClient(m.cli.Conn())
	return client.UserWechatAppLogin(ctx, in, opts...)
}

// 用户登录-qq登录
func (m *defaultUser) UserQQAppLogin(ctx context.Context, in *UserQQAppLoginReq, opts ...grpc.CallOption) (*UserQQAppLoginResp, error) {
	client := userpb2.NewUserClient(m.cli.Conn())
	return client.UserQQAppLogin(ctx, in, opts...)
}

// 用户登录-苹果登录
func (m *defaultUser) UserAppleLogin(ctx context.Context, in *UserAppleLoginReq, opts ...grpc.CallOption) (*UserAppleLoginResp, error) {
	client := userpb2.NewUserClient(m.cli.Conn())
	return client.UserAppleLogin(ctx, in, opts...)
}

// 用户登出
func (m *defaultUser) UserLoginOut(ctx context.Context, in *UserLoginOutReq, opts ...grpc.CallOption) (*UserLoginOutResp, error) {
	client := userpb2.NewUserClient(m.cli.Conn())
	return client.UserLoginOut(ctx, in, opts...)
}
