// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package server

import (
	"context"
	logic2 "fgzs/internal/app/user/rpc/internal/logic"
	"fgzs/internal/app/user/rpc/internal/svc"
	userpb2 "fgzs/internal/app/user/rpc/userpb"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	userpb2.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

// 用户注册
func (s *UserServer) UserRegister(ctx context.Context, in *userpb2.UserRegisterReq) (*userpb2.UserRegisterResp, error) {
	l := logic2.NewUserRegisterLogic(ctx, s.svcCtx)
	return l.UserRegister(in)
}

// 用户登录-用户名密码
func (s *UserServer) UserUsernameLogin(ctx context.Context, in *userpb2.UserUsernameLoginReq) (*userpb2.UserUsernameLoginResp, error) {
	l := logic2.NewUserUsernameLoginLogic(ctx, s.svcCtx)
	return l.UserUsernameLogin(in)
}

// 用户登录-短信发送
func (s *UserServer) UserSmsSend(ctx context.Context, in *userpb2.UserSmsSendReq) (*userpb2.UserSmsSendResp, error) {
	l := logic2.NewUserSmsSendLogic(ctx, s.svcCtx)
	return l.UserSmsSend(in)
}

// 用户登录-短信登录
func (s *UserServer) UserSmsLogin(ctx context.Context, in *userpb2.UserSmsLoginReq) (*userpb2.UserSmsLoginResp, error) {
	l := logic2.NewUserSmsLoginLogic(ctx, s.svcCtx)
	return l.UserSmsLogin(in)
}

// 用户登录-微信登录
func (s *UserServer) UserWechatAppLogin(ctx context.Context, in *userpb2.UserWechatAppLoginReq) (*userpb2.UserWechatAppLoginResp, error) {
	l := logic2.NewUserWechatAppLoginLogic(ctx, s.svcCtx)
	return l.UserWechatAppLogin(in)
}

// 用户登录-qq登录
func (s *UserServer) UserQQAppLogin(ctx context.Context, in *userpb2.UserQQAppLoginReq) (*userpb2.UserQQAppLoginResp, error) {
	l := logic2.NewUserQQAppLoginLogic(ctx, s.svcCtx)
	return l.UserQQAppLogin(in)
}

// 用户登录-苹果登录
func (s *UserServer) UserAppleLogin(ctx context.Context, in *userpb2.UserAppleLoginReq) (*userpb2.UserAppleLoginResp, error) {
	l := logic2.NewUserAppleLoginLogic(ctx, s.svcCtx)
	return l.UserAppleLogin(in)
}

// 用户登出
func (s *UserServer) UserLoginOut(ctx context.Context, in *userpb2.UserLoginOutReq) (*userpb2.UserLoginOutResp, error) {
	l := logic2.NewUserLoginOutLogic(ctx, s.svcCtx)
	return l.UserLoginOut(in)
}
