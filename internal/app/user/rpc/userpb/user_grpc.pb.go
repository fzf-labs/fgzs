// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: user.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 用户注册
	UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
	// 用户登录-用户名密码
	UserUsernameLogin(ctx context.Context, in *UserUsernameLoginReq, opts ...grpc.CallOption) (*UserUsernameLoginResp, error)
	// 用户登录-短信发送
	UserSmsSend(ctx context.Context, in *UserSmsSendReq, opts ...grpc.CallOption) (*UserSmsSendResp, error)
	// 用户登录-短信登录
	UserSmsLogin(ctx context.Context, in *UserSmsLoginReq, opts ...grpc.CallOption) (*UserSmsLoginResp, error)
	// 用户登录-微信登录
	UserWechatAppLogin(ctx context.Context, in *UserWechatAppLoginReq, opts ...grpc.CallOption) (*UserWechatAppLoginResp, error)
	// 用户登录-qq登录
	UserQQAppLogin(ctx context.Context, in *UserQQAppLoginReq, opts ...grpc.CallOption) (*UserQQAppLoginResp, error)
	// 用户登录-苹果登录
	UserAppleLogin(ctx context.Context, in *UserAppleLoginReq, opts ...grpc.CallOption) (*UserAppleLoginResp, error)
	// 用户登出
	UserLoginOut(ctx context.Context, in *UserLoginOutReq, opts ...grpc.CallOption) (*UserLoginOutResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	out := new(UserRegisterResp)
	err := c.cc.Invoke(ctx, "/userpb.user/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserUsernameLogin(ctx context.Context, in *UserUsernameLoginReq, opts ...grpc.CallOption) (*UserUsernameLoginResp, error) {
	out := new(UserUsernameLoginResp)
	err := c.cc.Invoke(ctx, "/userpb.user/UserUsernameLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserSmsSend(ctx context.Context, in *UserSmsSendReq, opts ...grpc.CallOption) (*UserSmsSendResp, error) {
	out := new(UserSmsSendResp)
	err := c.cc.Invoke(ctx, "/userpb.user/UserSmsSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserSmsLogin(ctx context.Context, in *UserSmsLoginReq, opts ...grpc.CallOption) (*UserSmsLoginResp, error) {
	out := new(UserSmsLoginResp)
	err := c.cc.Invoke(ctx, "/userpb.user/UserSmsLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserWechatAppLogin(ctx context.Context, in *UserWechatAppLoginReq, opts ...grpc.CallOption) (*UserWechatAppLoginResp, error) {
	out := new(UserWechatAppLoginResp)
	err := c.cc.Invoke(ctx, "/userpb.user/UserWechatAppLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserQQAppLogin(ctx context.Context, in *UserQQAppLoginReq, opts ...grpc.CallOption) (*UserQQAppLoginResp, error) {
	out := new(UserQQAppLoginResp)
	err := c.cc.Invoke(ctx, "/userpb.user/UserQQAppLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserAppleLogin(ctx context.Context, in *UserAppleLoginReq, opts ...grpc.CallOption) (*UserAppleLoginResp, error) {
	out := new(UserAppleLoginResp)
	err := c.cc.Invoke(ctx, "/userpb.user/UserAppleLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserLoginOut(ctx context.Context, in *UserLoginOutReq, opts ...grpc.CallOption) (*UserLoginOutResp, error) {
	out := new(UserLoginOutResp)
	err := c.cc.Invoke(ctx, "/userpb.user/UserLoginOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 用户注册
	UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error)
	// 用户登录-用户名密码
	UserUsernameLogin(context.Context, *UserUsernameLoginReq) (*UserUsernameLoginResp, error)
	// 用户登录-短信发送
	UserSmsSend(context.Context, *UserSmsSendReq) (*UserSmsSendResp, error)
	// 用户登录-短信登录
	UserSmsLogin(context.Context, *UserSmsLoginReq) (*UserSmsLoginResp, error)
	// 用户登录-微信登录
	UserWechatAppLogin(context.Context, *UserWechatAppLoginReq) (*UserWechatAppLoginResp, error)
	// 用户登录-qq登录
	UserQQAppLogin(context.Context, *UserQQAppLoginReq) (*UserQQAppLoginResp, error)
	// 用户登录-苹果登录
	UserAppleLogin(context.Context, *UserAppleLoginReq) (*UserAppleLoginResp, error)
	// 用户登出
	UserLoginOut(context.Context, *UserLoginOutReq) (*UserLoginOutResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserServer) UserUsernameLogin(context.Context, *UserUsernameLoginReq) (*UserUsernameLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUsernameLogin not implemented")
}
func (UnimplementedUserServer) UserSmsSend(context.Context, *UserSmsSendReq) (*UserSmsSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSmsSend not implemented")
}
func (UnimplementedUserServer) UserSmsLogin(context.Context, *UserSmsLoginReq) (*UserSmsLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSmsLogin not implemented")
}
func (UnimplementedUserServer) UserWechatAppLogin(context.Context, *UserWechatAppLoginReq) (*UserWechatAppLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWechatAppLogin not implemented")
}
func (UnimplementedUserServer) UserQQAppLogin(context.Context, *UserQQAppLoginReq) (*UserQQAppLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserQQAppLogin not implemented")
}
func (UnimplementedUserServer) UserAppleLogin(context.Context, *UserAppleLoginReq) (*UserAppleLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAppleLogin not implemented")
}
func (UnimplementedUserServer) UserLoginOut(context.Context, *UserLoginOutReq) (*UserLoginOutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoginOut not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpb.user/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserRegister(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserUsernameLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUsernameLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserUsernameLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpb.user/UserUsernameLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserUsernameLogin(ctx, req.(*UserUsernameLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserSmsSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSmsSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserSmsSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpb.user/UserSmsSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserSmsSend(ctx, req.(*UserSmsSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserSmsLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSmsLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserSmsLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpb.user/UserSmsLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserSmsLogin(ctx, req.(*UserSmsLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserWechatAppLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWechatAppLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserWechatAppLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpb.user/UserWechatAppLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserWechatAppLogin(ctx, req.(*UserWechatAppLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserQQAppLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQQAppLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserQQAppLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpb.user/UserQQAppLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserQQAppLogin(ctx, req.(*UserQQAppLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserAppleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAppleLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserAppleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpb.user/UserAppleLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserAppleLogin(ctx, req.(*UserAppleLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserLoginOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserLoginOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpb.user/UserLoginOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserLoginOut(ctx, req.(*UserLoginOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userpb.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegister",
			Handler:    _User_UserRegister_Handler,
		},
		{
			MethodName: "UserUsernameLogin",
			Handler:    _User_UserUsernameLogin_Handler,
		},
		{
			MethodName: "UserSmsSend",
			Handler:    _User_UserSmsSend_Handler,
		},
		{
			MethodName: "UserSmsLogin",
			Handler:    _User_UserSmsLogin_Handler,
		},
		{
			MethodName: "UserWechatAppLogin",
			Handler:    _User_UserWechatAppLogin_Handler,
		},
		{
			MethodName: "UserQQAppLogin",
			Handler:    _User_UserQQAppLogin_Handler,
		},
		{
			MethodName: "UserAppleLogin",
			Handler:    _User_UserAppleLogin_Handler,
		},
		{
			MethodName: "UserLoginOut",
			Handler:    _User_UserLoginOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
