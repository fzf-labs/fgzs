// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userAuthFieldNames          = builder.RawFieldNames(&UserAuth{})
	userAuthRows                = strings.Join(userAuthFieldNames, ",")
	userAuthRowsExpectAutoSet   = strings.Join(stringx.Remove(userAuthFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userAuthRowsWithPlaceHolder = strings.Join(stringx.Remove(userAuthFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheFgzsUserUserAuthIdPrefix = "cache:fgzsUser:userAuth:id:"
)

type (
	userAuthModel interface {
		Insert(ctx context.Context, data *UserAuth) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *UserAuth) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserAuth, error)
		Update(ctx context.Context, data *UserAuth) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *UserAuth) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUserAuthModel struct {
		sqlc.CachedConn
		table string
	}

	UserAuth struct {
		Id           int64          `db:"id"`
		Uid          string         `db:"uid"`           // uid
		IdentityType string         `db:"identity_type"` // 业务类型 weixin  apple qq
		IdentityKey  string         `db:"identity_key"`  // 业务登录key
		IdentityCode string         `db:"identity_code"` // 标识码
		IdentityName string         `db:"identity_name"` // 昵称
		Other        sql.NullString `db:"other"`         // 其他数据
		Status       int64          `db:"status"`        // 状态 1绑定 0解绑
		CreateTime   time.Time      `db:"create_time"`   // 创建时间
		UpdateTime   time.Time      `db:"update_time"`   // 更新时间
	}
)

func newUserAuthModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserAuthModel {
	return &defaultUserAuthModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_auth`",
	}
}

func (m *defaultUserAuthModel) Delete(ctx context.Context, id int64) error {
	fgzsUserUserAuthIdKey := fmt.Sprintf("%s%v", cacheFgzsUserUserAuthIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, fgzsUserUserAuthIdKey)
	return err
}

func (m *defaultUserAuthModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	fgzsUserUserAuthIdKey := fmt.Sprintf("%s%v", cacheFgzsUserUserAuthIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return session.ExecCtx(ctx, query, id)
	}, fgzsUserUserAuthIdKey)
	return err
}

func (m *defaultUserAuthModel) FindOne(ctx context.Context, id int64) (*UserAuth, error) {
	fgzsUserUserAuthIdKey := fmt.Sprintf("%s%v", cacheFgzsUserUserAuthIdPrefix, id)
	var resp UserAuth
	err := m.QueryRowCtx(ctx, &resp, fgzsUserUserAuthIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAuthRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAuthModel) Insert(ctx context.Context, data *UserAuth) (sql.Result, error) {
	fgzsUserUserAuthIdKey := fmt.Sprintf("%s%v", cacheFgzsUserUserAuthIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userAuthRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.IdentityType, data.IdentityKey, data.IdentityCode, data.IdentityName, data.Other, data.Status)
	}, fgzsUserUserAuthIdKey)
	return ret, err
}

func (m *defaultUserAuthModel) InsertTx(ctx context.Context, session sqlx.Session, data *UserAuth) (sql.Result, error) {
	fgzsUserUserAuthIdKey := fmt.Sprintf("%s%v", cacheFgzsUserUserAuthIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userAuthRowsExpectAutoSet)
		return session.ExecCtx(ctx, query, data.Uid, data.IdentityType, data.IdentityKey, data.IdentityCode, data.IdentityName, data.Other, data.Status)
	}, fgzsUserUserAuthIdKey)
	return ret, err
}

func (m *defaultUserAuthModel) Update(ctx context.Context, data *UserAuth) error {
	fgzsUserUserAuthIdKey := fmt.Sprintf("%s%v", cacheFgzsUserUserAuthIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userAuthRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.IdentityType, data.IdentityKey, data.IdentityCode, data.IdentityName, data.Other, data.Status, data.Id)
	}, fgzsUserUserAuthIdKey)
	return err
}

func (m *defaultUserAuthModel) UpdateTx(ctx context.Context, session sqlx.Session, data *UserAuth) error {
	fgzsUserUserAuthIdKey := fmt.Sprintf("%s%v", cacheFgzsUserUserAuthIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userAuthRowsWithPlaceHolder)
		return session.ExecCtx(ctx, query, data.Uid, data.IdentityType, data.IdentityKey, data.IdentityCode, data.IdentityName, data.Other, data.Status, data.Id)
	}, fgzsUserUserAuthIdKey)
	return err
}

func (m *defaultUserAuthModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFgzsUserUserAuthIdPrefix, primary)
}

func (m *defaultUserAuthModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAuthRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserAuthModel) tableName() string {
	return m.table
}
