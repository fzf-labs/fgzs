// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: identity.proto

package identitypb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Token) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TokenMultiError, or nil if none found.
func (m *Token) ValidateAll() error {
	return m.validate(true)
}

func (m *Token) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpiredAt

	// no validation rules for RefreshAt

	if len(errors) > 0 {
		return TokenMultiError(errors)
	}

	return nil
}

// TokenMultiError is an error wrapping multiple validation errors returned by
// Token.ValidateAll() if the designated constraints aren't met.
type TokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenMultiError) AllErrors() []error { return m }

// TokenValidationError is the validation error returned by Token.Validate if
// the designated constraints aren't met.
type TokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenValidationError) ErrorName() string { return "TokenValidationError" }

// Error satisfies the builtin error interface
func (e TokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenValidationError{}

// Validate checks the field values on GenerateTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateTokenReqMultiError, or nil if none found.
func (m *GenerateTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Target

	// no validation rules for Uid

	// no validation rules for Payloads

	if len(errors) > 0 {
		return GenerateTokenReqMultiError(errors)
	}

	return nil
}

// GenerateTokenReqMultiError is an error wrapping multiple validation errors
// returned by GenerateTokenReq.ValidateAll() if the designated constraints
// aren't met.
type GenerateTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateTokenReqMultiError) AllErrors() []error { return m }

// GenerateTokenReqValidationError is the validation error returned by
// GenerateTokenReq.Validate if the designated constraints aren't met.
type GenerateTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateTokenReqValidationError) ErrorName() string { return "GenerateTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e GenerateTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateTokenReqValidationError{}

// Validate checks the field values on GenerateTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateTokenRespMultiError, or nil if none found.
func (m *GenerateTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateTokenRespValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateTokenRespValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateTokenRespValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateTokenRespMultiError(errors)
	}

	return nil
}

// GenerateTokenRespMultiError is an error wrapping multiple validation errors
// returned by GenerateTokenResp.ValidateAll() if the designated constraints
// aren't met.
type GenerateTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateTokenRespMultiError) AllErrors() []error { return m }

// GenerateTokenRespValidationError is the validation error returned by
// GenerateTokenResp.Validate if the designated constraints aren't met.
type GenerateTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateTokenRespValidationError) ErrorName() string {
	return "GenerateTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateTokenRespValidationError{}

// Validate checks the field values on ClearTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClearTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClearTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClearTokenReqMultiError, or
// nil if none found.
func (m *ClearTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ClearTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Target

	// no validation rules for Uid

	if len(errors) > 0 {
		return ClearTokenReqMultiError(errors)
	}

	return nil
}

// ClearTokenReqMultiError is an error wrapping multiple validation errors
// returned by ClearTokenReq.ValidateAll() if the designated constraints
// aren't met.
type ClearTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClearTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClearTokenReqMultiError) AllErrors() []error { return m }

// ClearTokenReqValidationError is the validation error returned by
// ClearTokenReq.Validate if the designated constraints aren't met.
type ClearTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearTokenReqValidationError) ErrorName() string { return "ClearTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e ClearTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearTokenReqValidationError{}

// Validate checks the field values on ClearTokenResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClearTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClearTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClearTokenRespMultiError,
// or nil if none found.
func (m *ClearTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ClearTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ClearTokenRespMultiError(errors)
	}

	return nil
}

// ClearTokenRespMultiError is an error wrapping multiple validation errors
// returned by ClearTokenResp.ValidateAll() if the designated constraints
// aren't met.
type ClearTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClearTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClearTokenRespMultiError) AllErrors() []error { return m }

// ClearTokenRespValidationError is the validation error returned by
// ClearTokenResp.Validate if the designated constraints aren't met.
type ClearTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearTokenRespValidationError) ErrorName() string { return "ClearTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e ClearTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearTokenRespValidationError{}

// Validate checks the field values on ValidateTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ValidateTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateTokenReqMultiError, or nil if none found.
func (m *ValidateTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Target

	// no validation rules for Token

	if len(errors) > 0 {
		return ValidateTokenReqMultiError(errors)
	}

	return nil
}

// ValidateTokenReqMultiError is an error wrapping multiple validation errors
// returned by ValidateTokenReq.ValidateAll() if the designated constraints
// aren't met.
type ValidateTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateTokenReqMultiError) AllErrors() []error { return m }

// ValidateTokenReqValidationError is the validation error returned by
// ValidateTokenReq.Validate if the designated constraints aren't met.
type ValidateTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateTokenReqValidationError) ErrorName() string { return "ValidateTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e ValidateTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateTokenReqValidationError{}

// Validate checks the field values on ValidateTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ValidateTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateTokenRespMultiError, or nil if none found.
func (m *ValidateTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Payloads

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateTokenRespValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateTokenRespValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateTokenRespValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValidateTokenRespMultiError(errors)
	}

	return nil
}

// ValidateTokenRespMultiError is an error wrapping multiple validation errors
// returned by ValidateTokenResp.ValidateAll() if the designated constraints
// aren't met.
type ValidateTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateTokenRespMultiError) AllErrors() []error { return m }

// ValidateTokenRespValidationError is the validation error returned by
// ValidateTokenResp.Validate if the designated constraints aren't met.
type ValidateTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateTokenRespValidationError) ErrorName() string {
	return "ValidateTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateTokenRespValidationError{}
